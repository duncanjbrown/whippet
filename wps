#!/usr/bin/php5
<?php

require dirname(__FILE__) . '/lib/colours.class.php';
require dirname(__FILE__) . '/lib/wpserver.class.php';


//
// Check that the environment we're running in is sane, and explain what's
// wrong if it's not.
//

// PHP version
$version_bits = explode('.', phpversion());

if($version_bits[0] < 5 || $version_bits[1] < 4) {
  die_with_error("wpserver requires PHP 5.4 or greater");
}

// MySQL or sqlite/PDO extensions


// Libnotify
$output = array();
exec("which notify-send", $output);
if(file_exists(trim($output[0]))) {
  define("WPS_LIBNOTIFY_PATH", trim($output[0]));
}

// Timezone
date_default_timezone_set('UTC');


//
// Parse and validate arguments
//

$defaults = array(
  'i' => 'localhost',
  'p' => '8000',
  "mime-file" => "/etc/mime.types",
  "wp-root" => ".",
  "wp-version" => "latest",
  "show-errors" => E_ALL,
);

$arguments = getopt("hi:p:", array("help", "mime-file:", "wp-root:", "no-sql", "no-templates", "no-assets", "no-params", "no-scripts", "show-wp-errors", "show-errors:", "wp-version:"));

$options = array_merge($defaults, $arguments);

function die_with_error($error, $help = '') {
  echo Colours::fg('red');
  echo "Error: {$error}\n";
  echo Colours::fg('white');

  if(!empty($help)) {
    echo "\n{$help}\n";
  }

  exit(1);
}

// TODO: Check if they specified any options that we don't recognise

// Emit help, if required, and then exit
if(isset($options['h']) || isset($options['help'])) {
?>
WPServer launches a stand-alone web server for a specific WordPress installation.
It makes WordPress easier to develop with, for example, by adding lots of debug 
information to the terminal without cluttering up or breaking your templates.

Usage: 
  wps [options]

Options:
  -i <interface address>  Specify an interface to listen on. (Default: localhost)
  -p <port>               Specify a port number to listen on. (Default: 8000)

  --mime-file <filename>  Specify a path to a mime.types file containg content-type
                          rules. The most recent version of this file is available at:
                            
                            http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types

                          should you need to obtain it. (Default: /etc/mime.types)

  --wp-root <path>        Path to the WordPress installation or wp-content directory that 
                          WPServer should launch. (Default: .)

  --show-errors <errors>  A specification of PHP error types to be displayed. You can use any 
                          specification that you might normally use for error_reporting, 
                          for example:

                            --show-errors "E_ALL & ~E_STRICT"

                          (Default: E_ALL)

  --wp-version <version>  When running WPServer on a wp-content directory, specifies the version
                          of WordPress that should be loaded. The core files for this version must
                          be present at:

                          <?= dirname(__FILE__) ?>/wordpresses/<version>

                          (Default: latest)

  --no-sql                Do not display information about queries 
  --no-templates          Do not display information about template paths
  --no-assets             Do not display information about requests for static assets
  --no-params             Do not display information about request query parameters
  --no-scripts            Do not display information about requests for scripts
                          For example: load-scripts.php, load-styles.php

  --show-wp-errors        Show PHP error or notice information that was generated by the
                          WordPress core (Default: only show errors from wo-config.php 
                          and files in wp-content)
<?

  exit(0);
}

// Is there a mime.types file?
if(!file_exists($options['mime-file'])) {
  die_with_error(
    "Unable to find file {$options['mime-file']}", 
    "You can obtain the most recent mime file here:\n\n  http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types\n\nInstruct WPServer to use this file using the --mime-file argument.");
}

// Is the specified port sane?
if(!preg_match('/\d+/', $options['p']) || $options['p'] > 65536 || $options['p'] < 1) {
  die_with_error("Expected -p to give a port number between 1 and 65536");
}

// If wp-root is the current directory, set it to the absolute path
if($options['wp-root'] == '.') {
  $options['wp-root'] = getcwd();
}

// Make sure that the path to the wordpress root is canonical
$options['wp-root'] = realpath($options['wp-root']);

// Now that we have a root, figure out what it points to.
// If a wordpress folder, assume everything is standard
// If a wp-content folder, assume that there is no WP folder and
// that we need to twiddle things around
if(file_exists($options['wp-root'] . '/wp-config.php') && file_exists($options['wp-root'] . '/wp-includes')) {
  //
  // We are in a WordPress root.
  //

  define("WPS_LOCATION", "root");
}
elseif(file_exists($options['wp-root'] . '/themes') && file_exists($options['wp-root'] . '/plugins')){
  //
  // We are in a wp-content 
  //
  // We need to find a WP core to use, and inject some extra things into the 
  // loader to tell WP where to find wp-content
  // 

  // Remember where we are
  define("WPS_LOCATION", "wp-content");

  $skeleton_wpserver_wpconfig = <<<EOT
  <?php 

  /**
   * This file is used by wpserver when you run this wp-content folder without
   * putting it into a WordPress installation. You can put anything here that
   * you would normally put into wp-config.php.
   *
   * At a minimum, this file must contain working database details for the sites
   * that you're trying to run. There's no need to add the rest of the default
   * values, but you can if you like, or if you need to change them.
   *
   * Note: WP_DEBUG has no effect when running sites using wpserver.
   */

  /** The name of the database for WordPress */
  define('DB_NAME', 'wordpress');

  /** MySQL database username */
  define('DB_USER', 'root');

  /** MySQL database password */
  define('DB_PASSWORD', '');

  /** MySQL hostname */
  define('DB_HOST', 'localhost');
EOT;

  // Make sure there's a config we can use
  if(!file_exists($options['wp-root'] . "/wpserver-wp-config.php")) {
    echo 
      Colours::fg('red') . "Error: " . Colours::fg('white') . 
      "Couldn't find a configuration file at " . $options['wp-root'] . "/wpserver-wp-config.php\n" . 
      "WPServer needs this file in order to know where your database is. You can specify anything\n" .
      "there that you would normally put in wp-config.php. At a minimum, it must contain your\n" .
      "database configuration. Once it's created, you might want to add it to your source\n" .
      "control software's ignores file. Would you like to create this file now?\n\nCreate and edit file? [Y/n] "
    ;

    $fp = fopen("php://stdin", 'r');
    do
      $choice = trim(fgets($fp));
    while(array_search($choice, array('Y', 'y', 'N', 'n', '')) === false);
    fclose($fp);

    if(strtolower($choice) != 'n') {
      file_put_contents("{$options['wp-root']}/wpserver-wp-config.php", $skeleton_wpserver_wpconfig);

      if(getenv("VISUAL")) {
        system("\$VISUAL {$options['wp-root']}/wpserver-wp-config.php > `tty`");
      }
      else {
        echo 
          "Created settings file at {$options['wp-root']}/wpserver-wp-config.php, but could\n" .
          "not load your editor because \$VISUAL is not set. Please add your database configuration\n" .
          "to this file and restart WPServer\n";

        exit(1);
      }
    }
    else {
      exit(1);
    }
  } 
}
else {
  // We could be *anywhere*
  die_with_error(
    "--wp-root does not specify a WordPress installation or wp-content directory",
    "You must specify a path to a working WordPress installation, or to a wp-content directory"
  );
}

// Check that the wordpress directory exists
if(!is_dir($options['wp-root'])) {
  die_with_error("Unable to find directory: {$options['wp-root']}");
}

// Check that the wordpress directory contains a wordpress installation
if(WPS_LOCATION == 'root' && !file_exists($options['wp-root'] . '/wp-config.php')) {
  die_with_error(
    "Unable to find wp-config.php in your wordpress directory: {$options['wp-root']}",
    "Is there a wordpress installation in your current directory? If not, specify the path with --wp-root"
  );
}

if(WPS_LOCATION == 'wp-content' && !file_exists(dirname(__FILE__) . "/wordpresses/{$options['wp-version']}")) {
  echo
    Colours::fg('red') . "Error: " . Colours::fg('white') . 
    "Unable to find the specified WordPress core in your wordpresses directory (" . dirname(__FILE__) . "/wordpresses)\n",
    "To run a site from its wp-content folder without it being in a WordPress installation, you need to set up your\n" .
    "core WordPress files in the directory above. WPServer can set this up for you automatically.\n\n";

  if($options['wp-version'] == 'latest') {
    echo "Attempt to download the latest version of WordPress now? [Y/n] ";
  }
  else {
    echo "Attempt to download WordPress version {$options['wp-version']} now? [Y/n] ";
  }

  $fp = fopen("php://stdin", 'r');
  do
    $choice = trim(fgets($fp));
  while(array_search($choice, array('Y', 'y', 'N', 'n', '')) === false);
  fclose($fp);

  if(strtolower($choice) != 'n') {
    $tempname = tempnam("/tmp/", ".wpserver-") . "-download-wordpress-{$options['wp-version']}";

    if($options['wp-version'] == 'latest') {
      passthru("wget -O '{$tempname}' http://wordpress.org/latest.tar.gz");
    }
    else {
      passthru("wget -O '{$tempname}' http://wordpress.org/wordpress-{$options['wp-version']}.tar.gz");
    }

    passthru("tar -xvf '{$tempname}' -C " . dirname(__FILE__) . "/wordpresses");
    passthru("rm '{$tempname}'");
    passthru("mv '" . dirname(__FILE__) . "/wordpresses/wordpress'  '" . dirname(__FILE__) . "/wordpresses/{$options['wp-version']}'");
    passthru("rm -r '" . dirname(__FILE__) . "/wordpresses/{$options['wp-version']}/wp-content'");

    if(!file_exists(dirname(__FILE__) . "/wordpresses/{$options['wp-version']}")) {
      die_with_error("Tried to download WordPress, but something went wrong.", "Please download the version of WordPress you'd like to use, and extract it to " . dirname(__FILE__) . "/wordpresses/<version>");
    }
  } 
  else {
    exit(1);
  }
}

// Convert the show-errors field to something useful
$show_errors = @eval("return {$options['show-errors']};");

if($show_errors === false) {
  die_with_error(
    "Unable to evaluate error specification: {$options['show-errors']}",
    "The specification must be valid PHP code that identifies a set of errors to be displayed.\n" .
    "See the manual for more information: http://php.net/manual/en/function.error-reporting.php"
  );
}
else {
  $options['show-errors'] = $show_errors;
}


// Libnotify?
if(defined('WPS_LIBNOTIFY_PATH')) {
  $options['libnotify'] = WPS_LIBNOTIFY_PATH;
}


//
// Trap Ctrl-C so that we can say things before we quit
//

declare(ticks = 1);

pcntl_signal(SIGTERM, "signal_handler");
pcntl_signal(SIGINT, "signal_handler");

function signal_handler($signal) {
  global $options;

  // Delete the settings file
  if(file_exists('/tmp/.wpserver-arguments')) {
    unlink('/tmp/.wpserver-arguments');
  }
 
  // Delete the output buffer
  if(file_exists('/tmp/.wpserver_output')) {
    unlink('/tmp/.wpserver_output');
  }

  // Restore original wp-config
  if(WPS_LOCATION == 'root') {
    if(file_exists('/tmp/.wpserver-original-wp-config')) {
      file_put_contents($options['wp-root'] . "/wp-config.php", file_get_contents("/tmp/.wpserver-original-wp-config"));

      unlink("/tmp/.wpserver-original-wp-config");
    }
    else {
      if(WPS_LOCATION == 'root') {
        WPServer::message(
          Colours::fg('red') . "Error: " . Colours::fg('white') . "Unable to find wp-config backup file; could not restore original configuration",
          "Your wp-config file should have been backed up at /tmp/.wpserver-original-wp-config, but\n" .
          "it is missing or unreadable. You should edit your wp-config.php by hand to remove the\n" .
          "WPSERVER sections.\n");
      }
    }
  }
  else if(WPS_LOCATION == 'wp-content') {
    unlink("{$options['wp-root']}/wp-config.php");
    unlink("{$options['wp-root']}/wp-content");
  }

  echo "\nQuitting.\n";
  exit(0);
}


//
// Inject our code into WordPress
//

$dir = dirname(__FILE__);
$wp_content_fix = '';

if(WPS_LOCATION == 'wp-content') {
  $wp_content_fix .= "define('WP_CONTENT_DIR', '{$options['wp-root']}');\n";
//  $wp_content_fix .= "define('WP_CONTENT_URL', 'http://{$options['i']}:{$options['p']}/" . basename($options['wp-root'])  . "');\n";

  // Now we've done the necessary munging, move wp-root to the actual wordpress root
  $options['wp-content'] = $options['wp-root'];
  // TODO: Is this approach sensible?
  $options['wp-root'] = dirname(__FILE__) . "/wordpresses/{$options['wp-version']}";
}

$inject  = <<<EOT
////WPSERVER START
////You can ignore these sections. They're used by wpserver to collect data and will be automatically removed when you exit wpserver.
{$wp_content_fix}
////WPSERVER END

require_once(ABSPATH . 'wp-settings.php');

////WPSERVER START
require('{$dir}/lib/load_wpserver.php');
////WPSERVER END
EOT;

// Get the config
if(WPS_LOCATION == 'root') {
  $wp_config = file_get_contents($options['wp-root'] . "/wp-config.php");

  // Modify it
  $new_wp_config = str_replace("require_once(ABSPATH . 'wp-settings.php');", $inject, $wp_config);

  // Save it
  file_put_contents($options['wp-root'] . "/wp-config.php", $new_wp_config);

  // Save the original one so we can restore it later
  file_put_contents("/tmp/.wpserver-original-wp-config", $wp_config);
}
else if(WPS_LOCATION == 'wp-content') {
  $new_wp_config = file_get_contents("{$options['wp-content']}/wpserver-wp-config.php");

  if(strpos('DB_CHARSET', $new_wp_config) === false) {
    $new_wp_config .= "define('DB_CHARSET', 'utf8');\n";
  }

  if(strpos('DB_COLLAGE', $new_wp_config) === false) {
    $new_wp_config .= "define('DB_COLLATE', '');\n";
  }

  if(strpos('AUTH_KEY', $new_wp_config) === false) {
    $new_wp_config .= "define('AUTH_KEY',         'put your unique phrase here');\n";
  }

  if(strpos('SECURE_AUTH_KEY', $new_wp_config) === false) {
    $new_wp_config .= "define('SECURE_AUTH_KEY',  'put your unique phrase here');\n";
  }

  if(strpos('LOGGED_IN_KEY', $new_wp_config) === false) {
    $new_wp_config .= "define('LOGGED_IN_KEY',    'put your unique phrase here');\n";
  }

  if(strpos('NONCE_KEY', $new_wp_config) === false) {
    $new_wp_config .= "define('NONCE_KEY',        'put your unique phrase here');\n";
  }

  if(strpos('AUTH_SALT', $new_wp_config) === false) {
    $new_wp_config .= "define('AUTH_SALT',        'put your unique phrase here');\n";
  }

  if(strpos('SECURE_AUTH_SALT', $new_wp_config) === false) {
    $new_wp_config .= "define('SECURE_AUTH_SALT', 'put your unique phrase here');\n";
  }

  if(strpos('LOGGED_IN_SALT', $new_wp_config) === false) {
    $new_wp_config .= "define('LOGGED_IN_SALT',   'put your unique phrase here');\n";
  }

  if(strpos('NONCE_SALT', $new_wp_config) === false) {
    $new_wp_config .= "define('NONCE_SALT',       'put your unique phrase here');\n";
  }

  if(strpos('table_prefix', $new_wp_config) === false) {
    $new_wp_config .= "\$table_prefix  = 'wp_';\n";
  }

  if(strpos('WPLANG', $new_wp_config) === false) {
    $new_wp_config .= "define('WPLANG', '');\n";
  }

  if(strpos('ABSPATH', $new_wp_config) === false) {
    $new_wp_config .= "if ( !defined('ABSPATH') )\ndefine('ABSPATH', dirname(__FILE__) . '/');\n";
  }

  $new_wp_config .= $inject;

  file_put_contents("{$options['wp-root']}/wp-config.php", $new_wp_config);

  // Hook up the wp-content folder
  system("ln -s '{$options['wp-content']}' '{$options['wp-root']}/wp-content'");
}

//
// Mush up the arguments and start the server
//

$valid_arguments = serialize($options);

echo Colours::fg('blue');
echo "WP Standalone Server started at " . date('H:i:s \o\n d-m-Y') . "\n";
echo Colours::fg('white');
echo "Written and maintained by dxw. Visit http://wpserver.labs.dxw.com for more information.\n";

if(WPS_LOCATION == 'root') {
  echo "Found a WordPress installation at {$options['wp-root']}\n";
}
else {
  echo "Found a WordPress content directory at {$options['wp-content']}\n";
  echo "Using a WordPress core at: {$options['wp-root']}\n";
}

echo "Listening on {$options['i']}:{$options['p']}\n";
echo "Press Ctrl-C to quit.\n";

//
// PHP -S outputs boilerplate crap that we don't want to see.
// Start it in the background with the output piped to a file, and then read that file as it is written to.
//
// The file gets deleted when the user quits.
//

exec("echo '{$valid_arguments}' | php -S {$options['i']}:{$options['p']} " . dirname(__FILE__) . "/lib/router.php > /tmp/.wpserver_output 2>&1 &");

$fp = fopen("/tmp/.wpserver_output", 'r');
while(true) {
  $line = $c = '';

  while($c != "\n") {
    $c = fread($fp, 1);
    $line .= $c;
  }

  // 
  // Output filters
  // Run any filters that should be run on the output, and decide if we want to display it.
  //

  // Deal with PHP errors that the error handler can't manage
  if(preg_match('/(\[.+\]) (PHP .+) error:  (.+) in (.+) on line (\d+)$/', $line, $matches)) {

    $number = $matches[2];
    switch($matches[2]) {
      case "PHP Parse": $number = E_PARSE;
      case "PHP Fatal": $number = E_ERROR;
    }

    if(!isset($options['show-wp-errors']) && strpos($matches[4], 'wp-content') === false && strpos($matches[4], 'wp-config.php') === false) {
      continue;
    }
    
    WPServer::emit_php_error($number, $matches[3], $matches[4], $matches[5], $options);
    continue;
  }

  // Other stuff that comes out of PHP -S (only seen invalid request warnings so far)
  if(preg_match('/\[\w\w\w \w\w\w [\d\s:]+\] (.+)$/', $line, $matches)) {
    WPServer::message(Colours::fg('blue') . "Server: " . Colours::fg('white') . $matches[1]);
    continue;
  }

  echo $line;
}


// We'll never get here.
echo "Kosinski: The truth is, Captain, I made a mistake - a wonderful, incredible mistake...\n";

